// Code generated by lingon. EDIT AS MUCH AS YOU LIKE.

package dragonflydb

import (
	"time"

	v1 "github.com/cert-manager/cert-manager/pkg/apis/certmanager/v1"
	v11 "github.com/cert-manager/cert-manager/pkg/apis/meta/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

var Certificate = &v1.Certificate{
	ObjectMeta: metav1.ObjectMeta{
		Labels: map[string]string{
			"app.kubernetes.io/instance":   "dragonflydb",
			"app.kubernetes.io/managed-by": "Helm",
			"app.kubernetes.io/name":       "dragonfly",
			"app.kubernetes.io/version":    "v1.6.1",
			"helm.sh/chart":                "dragonfly-v1.6.1",
		},
		Name:      "dragonflydb",
		Namespace: "dragonflydb",
	},
	Spec: v1.CertificateSpec{
		CommonName: "dragonflydb",
		DNSNames: []string{
			"*.dragonflydb.dragonflydb.svc.cluster.local",
			"dragonflydb.dragonflydb.svc.cluster.local",
			"dragonflydb.dragonflydb.svc",
			"dragonflydb.dragonflydb",
			"dragonflydb",
			"localhost",
		},
		Duration:    &metav1.Duration{Duration: time.Duration(int64(315360000000000000))},
		IPAddresses: []string{"127.0.0.1"},
		IssuerRef: v11.ObjectReference{
			Kind: "ClusterIssuer",
			Name: "selfsigned",
		},
		SecretName: "dragonflydb-server-tls",
		Usages: []v1.KeyUsage{
			v1.KeyUsage("client auth"),
			v1.KeyUsage("server auth"),
			v1.KeyUsage("signing"),
			v1.KeyUsage("key encipherment"),
		},
	},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "cert-manager.io/v1",
		Kind:       "Certificate",
	},
}
