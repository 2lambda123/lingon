// Code generated by lingon. EDIT AS MUCH AS YOU LIKE.

package keda

import (
	"context"
	"errors"
	"os"
	"os/exec"

	"github.com/volvo-cars/lingon/pkg/kube"
	appsv1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	rbacv1 "k8s.io/api/rbac/v1"
	apiextensionsv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	apiregistrationv1 "k8s.io/kube-aggregator/pkg/apis/apiregistration/v1"
)

// validate the struct implements the interface
var _ kube.Exporter = (*Keda)(nil)

// Keda contains kubernetes manifests
type Keda struct {
	kube.App

	ClustertriggerauthenticationsShCRD      *apiextensionsv1.CustomResourceDefinition
	OperatorAuthReaderRB                    *rbacv1.RoleBinding
	OperatorCR                              *rbacv1.ClusterRole
	OperatorCRB                             *rbacv1.ClusterRoleBinding
	OperatorDeploy                          *appsv1.Deployment
	OperatorExternalMetricsReaderCR         *rbacv1.ClusterRole
	OperatorHpaControllerExternalMetricsCRB *rbacv1.ClusterRoleBinding
	OperatorMetricsApiserverDeploy          *appsv1.Deployment
	OperatorMetricsApiserverSVC             *corev1.Service
	OperatorRB                              *rbacv1.RoleBinding
	OperatorRole                            *rbacv1.Role
	OperatorSA                              *corev1.ServiceAccount
	OperatorSVC                             *corev1.Service
	OperatorSystemAuthDelegatorCRB          *rbacv1.ClusterRoleBinding
	ScaledjobsShCRD                         *apiextensionsv1.CustomResourceDefinition
	ScaledobjectsShCRD                      *apiextensionsv1.CustomResourceDefinition
	TriggerauthenticationsShCRD             *apiextensionsv1.CustomResourceDefinition
	V1Beta1ExternalMetricsK8SIoApiservices  *apiregistrationv1.APIService
}

// New creates a new Keda
func New() *Keda {
	return &Keda{
		ClustertriggerauthenticationsShCRD:      ClustertriggerauthenticationsShCRD,
		OperatorAuthReaderRB:                    OperatorAuthReaderRB,
		OperatorCR:                              OperatorCR,
		OperatorCRB:                             OperatorCRB,
		OperatorDeploy:                          OperatorDeploy,
		OperatorExternalMetricsReaderCR:         OperatorExternalMetricsReaderCR,
		OperatorHpaControllerExternalMetricsCRB: OperatorHpaControllerExternalMetricsCRB,
		OperatorMetricsApiserverDeploy:          OperatorMetricsApiserverDeploy,
		OperatorMetricsApiserverSVC:             OperatorMetricsApiserverSVC,
		OperatorRB:                              OperatorRB,
		OperatorRole:                            OperatorRole,
		OperatorSA:                              OperatorSA,
		OperatorSVC:                             OperatorSVC,
		OperatorSystemAuthDelegatorCRB:          OperatorSystemAuthDelegatorCRB,
		ScaledjobsShCRD:                         ScaledjobsShCRD,
		ScaledobjectsShCRD:                      ScaledobjectsShCRD,
		TriggerauthenticationsShCRD:             TriggerauthenticationsShCRD,
		V1Beta1ExternalMetricsK8SIoApiservices:  V1Beta1ExternalMetricsK8SIoApiservices,
	}
}

// Apply applies the kubernetes objects to the cluster
func (a *Keda) Apply(ctx context.Context) error {
	return Apply(ctx, a)
}

// Export exports the kubernetes objects to YAML files in the given directory
func (a *Keda) Export(dir string) error {
	return kube.Export(a, kube.WithExportOutputDirectory(dir))
}

// Apply applies the kubernetes objects contained in Exporter to the cluster
func Apply(ctx context.Context, km kube.Exporter) error {
	cmd := exec.CommandContext(ctx, "kubectl", "apply", "-f", "-")
	cmd.Env = os.Environ()        // inherit environment in case we need to use kubectl from a container
	stdin, err := cmd.StdinPipe() // pipe to pass data to kubectl
	if err != nil {
		return err
	}

	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	go func() {
		defer func() {
			err = errors.Join(err, stdin.Close())
		}()
		if errEW := kube.Export(
			km,
			kube.WithExportWriter(stdin),
			kube.WithExportAsSingleFile("stdin"),
		); errEW != nil {
			err = errors.Join(err, errEW)
		}
	}()

	if errS := cmd.Start(); errS != nil {
		return errors.Join(err, errS)
	}

	// waits for the command to exit and waits for any copying
	// to stdin or copying from stdout or stderr to complete
	return errors.Join(err, cmd.Wait())
}

// P converts T to *T, useful for basic types
func P[T any](t T) *T {
	return &t
}
