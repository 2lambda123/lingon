// Copyright (c) 2023 Volvo Car Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by lingon. EDIT AS MUCH AS YOU LIKE.

package keda

import (
	ku "github.com/volvo-cars/lingon/pkg/kubeutil"
	appsv1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/resource"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/intstr"
)

var OperatorDeploy = &appsv1.Deployment{
	ObjectMeta: KD.ObjectMeta(),
	Spec: appsv1.DeploymentSpec{
		Replicas: P(int32(1)),
		Selector: &metav1.LabelSelector{MatchLabels: KD.MatchLabels()},
		Template: corev1.PodTemplateSpec{
			ObjectMeta: metav1.ObjectMeta{Labels: KD.Labels()},
			Spec: corev1.PodSpec{
				AutomountServiceAccountToken: P(true),
				Containers: []corev1.Container{
					{
						Args: []string{
							"--leader-elect",
							"--zap-log-level=info",
							"--zap-encoder=console",
							"--zap-time-encoding=rfc3339",
							"--cert-dir=/certs",
							"--enable-cert-rotation=true",
							"--cert-secret-name=kedaorg-certs",
							"--operator-service-name=" + KD.Name,
							"--metrics-server-service-name=" + OperatorMetricsApiserverSVC.Name,
							"--webhooks-service-name=keda-admission-webhooks",
						},
						Command: []string{"/keda"},
						Env: []corev1.EnvVar{
							{Name: "WATCH_NAMESPACE"},
							ku.EnvVarDownAPI("POD_NAME", "metadata.name"),
							ku.EnvVarDownAPI(
								"POD_NAMESPACE",
								"metadata.namespace",
							),
							{Name: "OPERATOR_NAME", Value: KD.Name},
							{Name: "KEDA_HTTP_DEFAULT_TIMEOUT", Value: "3000"},
							{
								Name:  "KEDA_HTTP_MIN_TLS_VERSION",
								Value: "TLS12",
							},
						},
						Image:           KD.Img.URL(),
						ImagePullPolicy: corev1.PullAlways,
						LivenessProbe: &corev1.Probe{
							InitialDelaySeconds: int32(25),
							ProbeHandler: corev1.ProbeHandler{
								HTTPGet: &corev1.HTTPGetAction{
									Path: "/healthz",
									Port: intstr.IntOrString{IntVal: int32(8081)},
								},
							},
						},
						Name: KD.Name,
						Ports: []corev1.ContainerPort{
							KD.P.Container,
							{
								ContainerPort: int32(8080),
								Name:          "http",
								Protocol:      corev1.Protocol("TCP"),
							},
						},
						ReadinessProbe: &corev1.Probe{
							InitialDelaySeconds: int32(20),
							ProbeHandler: corev1.ProbeHandler{
								HTTPGet: &corev1.HTTPGetAction{
									Path: "/readyz",
									Port: intstr.IntOrString{IntVal: int32(8081)},
								},
							},
						},
						Resources: corev1.ResourceRequirements{
							Limits: map[corev1.ResourceName]resource.Quantity{
								corev1.ResourceName("cpu"):    resource.MustParse("1"),
								corev1.ResourceName("memory"): resource.MustParse("1000Mi"),
							},
							Requests: map[corev1.ResourceName]resource.Quantity{
								corev1.ResourceName("cpu"):    resource.MustParse("100m"),
								corev1.ResourceName("memory"): resource.MustParse("100Mi"),
							},
						},
						SecurityContext: &corev1.SecurityContext{
							Capabilities:           &corev1.Capabilities{Drop: []corev1.Capability{corev1.Capability("ALL")}},
							ReadOnlyRootFilesystem: P(true),
							SeccompProfile:         &corev1.SeccompProfile{Type: corev1.SeccompProfileType("RuntimeDefault")},
						},
						VolumeMounts: []corev1.VolumeMount{
							{
								MountPath: "/certs",
								Name:      "certificates",
								ReadOnly:  true,
							},
						},
					},
				},
				NodeSelector:       map[string]string{ku.LabelOSStable: "linux"},
				SecurityContext:    &corev1.PodSecurityContext{RunAsNonRoot: P(true)},
				ServiceAccountName: OperatorSA.Name,
				Volumes: []corev1.Volume{
					{
						Name: "certificates",
						VolumeSource: corev1.VolumeSource{
							Secret: &corev1.SecretVolumeSource{
								DefaultMode: P(int32(420)),
								Optional:    P(true),
								SecretName:  "kedaorg-certs",
							},
						},
					},
				},
			},
		},
	},
	TypeMeta: ku.TypeDeploymentV1,
}

var OperatorMetricsApiserverDeploy = &appsv1.Deployment{
	ObjectMeta: metav1.ObjectMeta{
		Labels: map[string]string{
			"app":                          "keda-operator-metrics-apiserver",
			"app.kubernetes.io/component":  "operator",
			"app.kubernetes.io/instance":   "keda",
			"app.kubernetes.io/managed-by": "Helm",
			"app.kubernetes.io/name":       "keda-operator-metrics-apiserver",
			"app.kubernetes.io/part-of":    "keda-operator",
			"app.kubernetes.io/version":    "2.11.1",
			"helm.sh/chart":                "keda-2.11.1",
		},
		Name:      "keda-operator-metrics-apiserver",
		Namespace: "keda",
	},
	Spec: appsv1.DeploymentSpec{
		Replicas: P(int32(1)),
		Selector: &metav1.LabelSelector{
			MatchLabels: map[string]string{"app": KD.Name + "-metrics-apiserver"},
		},
		Template: corev1.PodTemplateSpec{
			ObjectMeta: metav1.ObjectMeta{
				Labels: map[string]string{
					"app":                          "keda-operator-metrics-apiserver",
					"app.kubernetes.io/component":  "operator",
					"app.kubernetes.io/instance":   "keda",
					"app.kubernetes.io/managed-by": "Helm",
					"app.kubernetes.io/name":       "keda-operator-metrics-apiserver",
					"app.kubernetes.io/part-of":    "keda-operator",
					"app.kubernetes.io/version":    "2.11.1",
					"helm.sh/chart":                "keda-2.11.1",
				},
			},
			Spec: corev1.PodSpec{
				AutomountServiceAccountToken: P(true),
				Containers: []corev1.Container{
					{
						Args: []string{
							"/usr/local/bin/keda-adapter",
							"--port=8080",
							"--secure-port=6443",
							"--logtostderr=true",
							"--metrics-service-address=keda-operator.keda.svc.cluster.local:9666",
							"--client-ca-file=/certs/ca.crt",
							"--tls-cert-file=/certs/tls.crt",
							"--tls-private-key-file=/certs/tls.key",
							"--cert-dir=/certs",
							"--v=0",
						},
						Env: []corev1.EnvVar{
							{Name: "WATCH_NAMESPACE"},
							ku.EnvVarDownAPI(
								"POD_NAMESPACE",
								"metadata.namespace",
							),
							{
								Name:  "KEDA_HTTP_DEFAULT_TIMEOUT",
								Value: "3000",
							},
							{
								Name:  "KEDA_HTTP_MIN_TLS_VERSION",
								Value: "TLS12",
							},
						},
						Image:           KD.MetricsAPI.Img.URL(),
						ImagePullPolicy: corev1.PullPolicy("Always"),
						LivenessProbe: &corev1.Probe{
							InitialDelaySeconds: int32(5),
							ProbeHandler: corev1.ProbeHandler{
								HTTPGet: &corev1.HTTPGetAction{
									Path:   "/healthz",
									Port:   intstr.IntOrString{IntVal: int32(6443)},
									Scheme: corev1.URIScheme("HTTPS"),
								},
							},
						},
						Name: "keda-operator-metrics-apiserver",
						Ports: []corev1.ContainerPort{
							{
								ContainerPort: int32(6443),
								Name:          "https",
								Protocol:      corev1.Protocol("TCP"),
							}, {
								ContainerPort: int32(8080),
								Name:          "metrics",
								Protocol:      corev1.Protocol("TCP"),
							},
						},
						ReadinessProbe: &corev1.Probe{
							InitialDelaySeconds: int32(5),
							ProbeHandler: corev1.ProbeHandler{
								HTTPGet: &corev1.HTTPGetAction{
									Path:   "/readyz",
									Port:   intstr.IntOrString{IntVal: int32(6443)},
									Scheme: corev1.URIScheme("HTTPS"),
								},
							},
						},
						Resources: corev1.ResourceRequirements{
							Limits: map[corev1.ResourceName]resource.Quantity{
								corev1.ResourceName("cpu"):    resource.MustParse("1"),
								corev1.ResourceName("memory"): resource.MustParse("1000Mi"),
							},
							Requests: map[corev1.ResourceName]resource.Quantity{
								corev1.ResourceName("cpu"):    resource.MustParse("100m"),
								corev1.ResourceName("memory"): resource.MustParse("100Mi"),
							},
						},
						SecurityContext: &corev1.SecurityContext{
							Capabilities:           &corev1.Capabilities{Drop: []corev1.Capability{corev1.Capability("ALL")}},
							ReadOnlyRootFilesystem: P(true),
							SeccompProfile:         &corev1.SeccompProfile{Type: corev1.SeccompProfileType("RuntimeDefault")},
						},
						VolumeMounts: []corev1.VolumeMount{
							{
								MountPath: "/certs",
								Name:      "certificates",
								ReadOnly:  true,
							},
						},
					},
				},
				DNSPolicy:          corev1.DNSPolicy("ClusterFirst"),
				NodeSelector:       map[string]string{ku.LabelOSStable: "linux"},
				SecurityContext:    &corev1.PodSecurityContext{RunAsNonRoot: P(true)},
				ServiceAccountName: OperatorSA.Name,
				Volumes: []corev1.Volume{
					{
						Name: "certificates",
						VolumeSource: corev1.VolumeSource{
							Secret: &corev1.SecretVolumeSource{
								DefaultMode: P(int32(420)),
								SecretName:  "kedaorg-certs",
							},
						},
					},
				},
			},
		},
	},
	TypeMeta: ku.TypeDeploymentV1,
}
