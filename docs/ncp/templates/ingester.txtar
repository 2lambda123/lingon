-- main.go --
package main

import (
	"context"
	"errors"
	"flag"
	"os"
	"time"

	"ingester/schema"

	"log/slog"

	"github.com/nats-io/nats.go"
	"github.com/nats-io/nats.go/jetstream"
	"google.golang.org/protobuf/proto"
)

func main() {
	var (
		stream   string
		consumer string
	)
	flag.StringVar(&stream, "stream", "", "name of the stream to subscribe to")
	flag.StringVar(&consumer, "consumer", "", "name of the consumer to subscribe to")
	flag.Parse()

	var cErr error
	// Check flags
	if stream == "" {
		cErr = errors.Join(cErr, errors.New("stream argument is required"))
	}
	if consumer == "" {
		cErr = errors.Join(cErr, errors.New("consumer argument is required"))
	}

	// Check environment variables
	natsURL, ok := os.LookupEnv("NATS_URL")
	if !ok {
		natsURL = nats.DefaultURL
		// cErr = errors.Join(cErr, errors.New("NATS_URL not set"))
	}
	natsJWT, ok := os.LookupEnv("NATS_JWT")
	if !ok {
		cErr = errors.Join(cErr, errors.New("NATS_JWT not set"))
	}
	natsNKey, ok := os.LookupEnv("NATS_NKEY")
	if !ok {
		cErr = errors.Join(cErr, errors.New("NATS_NKEY not set"))
	}
	if cErr != nil {
		slog.Error("required environment variables not set", "error", cErr)
		os.Exit(1)
	}
	nc, err := nats.Connect(natsURL, nats.UserJWTAndSeed(natsJWT, natsNKey))
	if err != nil {
		slog.Error("connecting to NATS", "error", err)
		os.Exit(1)
	}
	defer nc.Close()

	ctx := context.TODO()

	js, err := jetstream.New(nc)
	if err != nil {
		slog.Error("getting JetStream instance", "error", err)
		os.Exit(1)
	}

	cons, err := js.Consumer(ctx, stream, consumer)
	if err != nil {
		slog.Error("getting consumer", "error", err)
		os.Exit(1)
	}

	slog.Info("listening for messages", "stream", stream, "consumer", consumer)

	count := 0
	for {
		msg, err := cons.Next()
		if err != nil {
			// Ignore timeout
			if errors.Is(err, nats.ErrTimeout) {
				slog.Info("timeout getting next message")
				continue
			}
			slog.Error("getting next message", "error", err)
			os.Exit(1)
		}
		count++
		slog.Info("SLEEPING 10 SECONDS")
		time.Sleep(10 * time.Second)
		var event schema.Event
		if err := proto.Unmarshal(msg.Data(), &event); err != nil {
			slog.Info(
				"terminating message unmarshalling protobuf message failed",
				"msg_subject",
				msg.Subject,
			)
			if err := msg.Term(); err != nil {
				slog.Error("terminating message", "error", err)
			}
			continue
		}
		// IMPORTANT: This terminates every 5th message intentionally!!
		if count%5 == 0 {
			slog.Info("NACK message by 5th message", "count", count)
			if err := msg.NakWithDelay(time.Minute * 5); err != nil {
				slog.Error("nacking message", "error", err)
			}
			// slog.Info("Term message by 5th message", "count", count)
			// if err := msg.Term(); err != nil {
			// 	slog.Error("terminating message", "error", err)
			// }
			continue
		}
		slog.Info("acknowledging message", "event", event.String())
		if err := msg.Ack(); err != nil {
			slog.Error("acknowledging message", "error", err)
		}
	}
}
-- go.mod --
module ingester

go 1.20

require (
	github.com/nats-io/nats.go v1.28.0
	google.golang.org/protobuf v1.31.0
)

require (
	github.com/google/go-cmp v0.5.8 // indirect
	github.com/klauspost/compress v1.16.7 // indirect
	github.com/nats-io/nats-server/v2 v2.9.21 // indirect
	github.com/nats-io/nkeys v0.4.4 // indirect
	github.com/nats-io/nuid v1.0.1 // indirect
	golang.org/x/crypto v0.12.0 // indirect
	golang.org/x/sys v0.11.0 // indirect
	golang.org/x/text v0.12.0 // indirect
)
-- go.sum --
github.com/golang/protobuf v1.5.0 h1:LUVKkCeviFUMKqHa4tXIIij/lbhnMbP7Fn5wKdKkRh4=
github.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=
github.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
github.com/google/go-cmp v0.5.8 h1:e6P7q2lk1O+qJJb4BtCQXlK8vWEO8V1ZeuEdJNOqZyg=
github.com/google/go-cmp v0.5.8/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
github.com/klauspost/compress v1.16.7 h1:2mk3MPGNzKyxErAw8YaohYh69+pa4sIQSC0fPGCFR9I=
github.com/klauspost/compress v1.16.7/go.mod h1:ntbaceVETuRiXiv4DpjP66DpAtAGkEQskQzEyD//IeE=
github.com/minio/highwayhash v1.0.2 h1:Aak5U0nElisjDCfPSG79Tgzkn2gl66NxOMspRrKnA/g=
github.com/nats-io/jwt/v2 v2.4.1 h1:Y35W1dgbbz2SQUYDPCaclXcuqleVmpbRa7646Jf2EX4=
github.com/nats-io/nats-server/v2 v2.9.21 h1:2TBTh0UDE74eNXQmV4HofsmRSCiVN0TH2Wgrp6BD6fk=
github.com/nats-io/nats-server/v2 v2.9.21/go.mod h1:ozqMZc2vTHcNcblOiXMWIXkf8+0lDGAi5wQcG+O1mHU=
github.com/nats-io/nats.go v1.28.0 h1:Th4G6zdsz2d0OqXdfzKLClo6bOfoI/b1kInhRtFIy5c=
github.com/nats-io/nats.go v1.28.0/go.mod h1:XpbWUlOElGwTYbMR7imivs7jJj9GtK7ypv321Wp6pjc=
github.com/nats-io/nkeys v0.4.4 h1:xvBJ8d69TznjcQl9t6//Q5xXuVhyYiSos6RPtvQNTwA=
github.com/nats-io/nkeys v0.4.4/go.mod h1:XUkxdLPTufzlihbamfzQ7mw/VGx6ObUs+0bN5sNvt64=
github.com/nats-io/nuid v1.0.1 h1:5iA8DT8V7q8WK2EScv2padNa/rTESc1KdnPw4TC2paw=
github.com/nats-io/nuid v1.0.1/go.mod h1:19wcPz3Ph3q0Jbyiqsd0kePYG7A95tJPxeL+1OSON2c=
golang.org/x/crypto v0.12.0 h1:tFM/ta59kqch6LlvYnPa0yx5a83cL2nHflFhYKvv9Yk=
golang.org/x/crypto v0.12.0/go.mod h1:NF0Gs7EO5K4qLn+Ylc+fih8BSTeIjAP05siRnAh98yw=
golang.org/x/sys v0.11.0 h1:eG7RXZHdqOJ1i+0lgLgCpSXAp6M3LYlAo6osgSi0xOM=
golang.org/x/sys v0.11.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/text v0.12.0 h1:k+n5B8goJNdU7hSvEtMUz3d1Q6D/XW4COJSJR6fN0mc=
golang.org/x/text v0.12.0/go.mod h1:TvPlkZtksWOMsz7fbANvkp4WM8x/WCo/om8BMLbz+aE=
golang.org/x/time v0.3.0 h1:rg5rLMjNzMS1RkNLzCG38eapWhnYLFYXDXj2gOlr8j4=
golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
google.golang.org/protobuf v1.31.0 h1:g0LDEJHgrBl9N9r17Ru3sqWhkIx2NB67okBHPwC7hs8=
google.golang.org/protobuf v1.31.0/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=
